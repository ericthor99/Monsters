{"version":3,"sources":["Components/cards/card.component.jsx","Components/card-list/card-list.component.jsx","Components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","string","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAY,iBAAjB,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,uBAClB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCFKC,EAAW,SAAAR,GAAK,OAEzB,qBAAKC,UAAa,YAAlB,SACED,EAAMS,SAASC,KAAK,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UCNdM,G,MAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACtB,uBACIZ,UAAsB,SACtBa,KAAsB,SACtBF,YAAwBA,EACxBG,SAAwBF,MCkDjBG,E,kDAlDb,aAAe,IAAD,8BACZ,gBAkBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAlBpC,EAAKC,MAAQ,CACXC,OAAQ,aACRd,SAAU,GACVU,YAAa,IALL,E,qDAWd,WAAoB,IAAD,OACjBK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAU,CAACT,SAAUmB,S,oBAU3C,WAIF,MAAkCC,KAAKP,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZW,EAAmBrB,EAASsB,QAAS,SAAA3B,GAAO,OAC1CA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,kBAGpD,OACM,sBAAK/B,UAAU,MAAf,UACA,iDACA,cAAC,EAAD,CACIW,YAAc,kBACdC,aAAiBgB,KAAKhB,eAE1B,cAAC,EAAD,CAAUJ,SAAYqB,EAAtB,4B,GA1CQI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.004fd800.chunk.js","sourcesContent":["import React from 'react';\r\nimport './cards.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className = \"card-container\">\r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&180x180`}/>\r\n        <h2> {props.monster.name} </h2>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n);","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../cards/card.component';\r\n\r\n\r\nexport const CardList = props => (\r\n\r\n    <div className = {'card-list'}>\r\n    { props.monsters.map( monster => (\r\n        <Card key={monster.id} monster = {monster} /> \r\n    ))\r\n    } \r\n   </div> \r\n);\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox  = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className           = 'search'\r\n        type                = 'search' \r\n        placeholder         = { placeholder }\r\n        onChange            = { handleChange }\r\n    />\r\n);\r\n\r\n    // onChange = { e => {   \r\n    //         this.setState({ searchField: e.target.value }, () =>\r\n    //         console.log(this.state) );\r\n    // }}","\nimport React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './Components/card-list/card-list.component';\nimport { SearchBox } from './Components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n      this.state = {\n        string: \"Hello Eric\",\n        monsters: [],\n        searchField: ''\n      };\n// Use binding to fix context for 'this' - alternatively use '=>' function\n// this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    // .then(users => console.log(users));\n    .then(users => this.setState( {monsters: users}));\n  }\n\n// Use arrow function for lexical scoping of this instead of binding 'this'.\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n\n\n  render (){\n//  Use destructuring to pull properties off an object and set to them to some constants.\n//  Use these constants in building the filter object.\n\nconst { monsters, searchField } = this.state;\nconst filteredMonsters = monsters.filter ( monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase() )\n);\n\n    return (\n          <div className=\"App\">\n          <h1>Monster Rolodex</h1>\n          <SearchBox  \n              placeholder = 'search monsters' \n              handleChange = { this.handleChange }\n            />\n          <CardList monsters = {filteredMonsters}>       </CardList>\n          {/* <CardList monsters = {this.state.monster}>       </CardList> */}\n          </div>\n          \n        );\n  };\n};\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}